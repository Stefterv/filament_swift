//
//  IndirectLight.h
//  swift-gltf-viewer
//
//  Created by Stef Tervelde on 30.06.22.
//
#import <Foundation/Foundation.h>
#import <simd/simd.h>
#import "Texture.h"

#ifndef IndirectLight_h
#define IndirectLight_h

/**
 * IndirectLight is used to simulate environment lighting, a form of global illumination.
 *
 * Environment lighting has a two components:
 *  1. irradiance
 *  2. reflections (specular component)
 *
 * Environments are usually captured as high-resolution HDR equirectangular images and processed
 * by the **cmgen** tool to generate the data needed by IndirectLight.
 *
 * @note
 * Currently IndirectLight is intended to be used for "distant probes", that is, to represent
 * global illumination from a distant (i.e. at infinity) environment, such as the sky or distant
 * mountains. Only a single IndirectLight can be used in a Scene. This limitation will be lifted
 * in the future.
 *
 * Creation and destruction
 * ========================
 *
 * An IndirectLight object is created using the IndirectLight::Builder and destroyed by calling
 * Engine::destroy(const IndirectLight*).
 *
 *
 *
 * Irradiance
 * ==========
 *
 * The irradiance represents the light that comes from the environment and shines an
 * object's surface.
 *
 * The irradiance is calculated automatically from the Reflections (see below), and generally
 * doesn't need to be provided explicitly.  However, it can be provided separately from the
 * Reflections as
 * [spherical harmonics](https://en.wikipedia.org/wiki/Spherical_harmonics) (SH) of 1, 2 or
 * 3 bands, respectively 1, 4 or 9 coefficients.
 *
 * @note
 * Use the **cmgen** tool to generate the `SH` for a given environment.
 *
 * Reflections
 * ===========
 *
 * The reflections on object surfaces (specular component) is calculated from a specially
 * filtered cubemap pyramid generated by the **cmgen** tool.
 *
 *
 * @see Scene, Light, Texture, Skybox
 */
@interface IndirectLight : NSObject

@property (nonatomic, readonly, nonnull) void* light  NS_SWIFT_UNAVAILABLE("Don't access the raw pointers");
- (nonnull id) init: (nonnull void*) light NS_SWIFT_UNAVAILABLE("Create a new renderer with engine.createRenderer");
- (nonnull id) init NS_UNAVAILABLE;

- (void) setIntensity: (double) intensity;
- (double) getIntensity;

- (void) setRotation: (simd_double3x3) rotation;
- (simd_double3x3) getRotation;

- (nonnull Texture*) getReflectionsTexture;
- (nonnull Texture*) getIrradianceTexture;
/**
 * Helper to estimate the direction of the dominant light in the environment represented by
 * spherical harmonics.
 *
 * This assumes that there is only a single dominant light (such as the sun in outdoors
 * environments), if it's not the case the direction returned will be an average of the
 * various lights based on their intensity.
 *
 * If there are no clear dominant light, as is often the case with low dynamic range (LDR)
 * environments, this method may return a wrong or unexpected direction.
 *
 * The dominant light direction can be used to set a directional light's direction,
 * for instance to produce shadows that match the environment.
 *
 * @param sh        3-band spherical harmonics
 *
 * @return A unit vector representing the direction of the dominant light
 *
 * @see LightManager::Builder::direction()
 * @see getColorEstimate()
 */
+ (simd_double3) getDirectionEstimate: (simd_double3x3) sh;
/**
 * Helper to estimate the color and relative intensity of the environment represented by
 * spherical harmonics in a given direction.
 *
 * This can be used to set the color and intensity of a directional light. In this case
 * make sure to multiply this relative intensity by the the intensity of this indirect light.
 *
 * @param sh        3-band spherical harmonics
 * @param direction a unit vector representing the direction of the light to estimate the
 *                  color of. Typically this the value returned by getDirectionEstimate().
 *
 * @return A vector of 4 floats where the first 3 components represent the linear color and
 *         the 4th component represents the intensity of the dominant light
 *
 * @see LightManager::Builder::color()
 * @see LightManager::Builder::intensity()
 * @see getDirectionEstimate, getIntensity, setIntensity
 */
+ (simd_double4) getColorEstimate: (simd_double3x3) sh :(simd_double3) direction;

@end


#endif /* IndirectLight_h */
